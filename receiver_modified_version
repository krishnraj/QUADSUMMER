#include "PinChangeInt1.h"
#include <Wire.h>
double angles[4];
#define MAXANGLE 160


#define AILERON  0
#define ELEVATOR 1
#define THROTTLE 2
#define RUDDER   3
#define ALTPIN   4

#define AILERON_IN  10
#define ELEVATOR_IN 11
#define THROTTLE_IN 12
#define RUDDER_IN   13
#define ALTPIN_IN   9

uint8_t rc_pins[5] = {AILERON_IN, ELEVATOR_IN, THROTTLE_IN, RUDDER_IN, ALTPIN_IN};
uint8_t rc_flags[5] = {1, 2, 4, 8, 16};
uint16_t rc_values[5] = {0, 0, 0, 1500, 0};

volatile uint8_t rc_shared_flags;
volatile uint16_t rc_shared_values[5];
volatile uint32_t rc_shared_ts[5];

void rc_channel_change(uint8_t id) {
  if (digitalRead(rc_pins[id]) == HIGH) {
    rc_shared_ts[id] = micros();
  }
  else {
    rc_shared_values[id] = (uint16_t)(micros() - rc_shared_ts[id]);
    rc_shared_flags |= rc_flags[id];
  }
}

void rc_aileron_change()  { rc_channel_change(AILERON);  }
void rc_elevator_change() { rc_channel_change(ELEVATOR); }
void rc_throttle_change() { rc_channel_change(THROTTLE); }
void rc_rudder_change()   { rc_channel_change(RUDDER);   }
void rc_altpin_change()   { rc_channel_change(ALTPIN);    }

void rc_setup_interrupts() {
  PCintPort::attachInterrupt(rc_pins[AILERON],  &rc_aileron_change, CHANGE);
  PCintPort::attachInterrupt(rc_pins[ELEVATOR], &rc_elevator_change, CHANGE);
  PCintPort::attachInterrupt(rc_pins[THROTTLE], &rc_throttle_change, CHANGE);
  PCintPort::attachInterrupt(rc_pins[RUDDER],   &rc_rudder_change, CHANGE);
  PCintPort::attachInterrupt(rc_pins[ALTPIN],   &rc_altpin_change, CHANGE);  
}

void rc_process_channels() {
  static uint8_t flags;
  
  if (rc_shared_flags) {
    noInterrupts();
    flags = rc_shared_flags;
    
    if (flags & rc_flags[0]) rc_values[0] = rc_shared_values[0];
    if (flags & rc_flags[1]) rc_values[1] = rc_shared_values[1];
    if (flags & rc_flags[2]) rc_values[2] = rc_shared_values[2];
    if (flags & rc_flags[3]) rc_values[3] = rc_shared_values[3];
    if (flags & rc_flags[4]) rc_values[4] = rc_shared_values[4];
    rc_shared_flags = 0;
    interrupts(); 
  }

  flags = 0;
}


void rc_print_channels() {
  static char str[64];
 
  sprintf(str, "AILE: %d, ELEV: %d, THRO: %d, RUDD: %d, ALT: %d\n",
    rc_values[0], rc_values[1], rc_values[2], rc_values[3], rc_values[4]
  );
 
  Serial.print(str); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {
  Wire.begin();
  Serial.begin(115200);
 // mymotor1.attach(7);
 // mymotor2.attach(6);
 // mymotor3.attach(5);
 // mymotor4.attach(4);  
  rc_setup_interrupts();
 /*MPU6050();
  initialize();
  setRate(0);
  setDLPFMode(4);
  getpiddata();
 // pinMode(led, OUTPUT); 
// motorArmed=0;
//Serial.println(motorArmed);
      initializeBaro(); 
  for(i=0;i<100;i++){
    getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    set1=set1 + (float)gx/131 ;
    set2=set2 + (float)gy/131 ;
    set3=set3 + (float)gz/131 ;
  }
  set1 = set1/100;
  set2 = set2/100;
  set3 = set3/100;*/
//Serial.print(set1);  Serial.print("\t");  Serial.print(set2); Serial.print("\t");  Serial.print(set3);

delay(1000);
}

//////////////////////////////////////////////////////////////////////////////////////////
void loop() { 
 // currentTime = micros();
  
  // Serial.println(motorArmed);
//  arming();
  rc_process_channels();
  // Serial.println(motorArmed);
  // rc_channel_map();
//  getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  // convert(&ax, &ay, &az, &gx, &gy, &gz);
   rc_print_channels();
  /********************************to print the values of accel, gyro and receiever values************************/

}
